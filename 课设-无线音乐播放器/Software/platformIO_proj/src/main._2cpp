///*  ============================================================================================================
//    MrDIY Audio Notifier is a cloud-free media notifier that can play MP3s, stream icecast radios, read text 
//    and play RTTTL ringtones. It is controller over MQTT.
//
//      Option 1) Connect your audio jack to the Rx and GN pins. Then connect the audio jack to an external amplifier. 
//      Option 2) Use an extenal DAC (like MAX98357A) and uncomment "#define USE_I2S" in the code.
//
//
//    + MQTT COMMANDS:  ( 'your_custom_mqtt_topic' is the MQTT prefix defined during the setup)
//
//      - Play an MP3             MQTT topic: "your_custom_mqtt_topic/play"
//                                MQTT load: http://url-to-the-mp3-file/file.mp3 
//                                PS: supports HTTP only, no HTTPS.  
//
//      - Play an Icecast Stream  MQTT topic: "your_custom_mqtt_topic/stream"
//                                MQTT load: http://url-to-the-icecast-stream/file.mp3, example: http://22203.live.streamtheworld.com/WHTAFM.mp3
//
//      - Play a Ringtone         MQTT topic: "your_custom_mqtt_topic/tone"
//                                MQTT load: RTTTL formated text, example: Soap:d=8,o=5,b=125:g,a,c6,p,a,4c6,4p,a,g,e,c,4p,4g,a
//
//      - Say Text                MQTT topic: "your_custom_mqtt_topic/say"
//                                MQTT load: Text to be read, example: Hello There. How. Are. You?
//
//      - Stop Playing            MQTT topic: "your_custom_mqtt_topic/stop"
//      
//      - Change the Volume       MQTT topic: "your_custom_mqtt_topic/volume"
//                                MQTT load: a double between 0.00 and 1.00, example: 0.7
//
//
//    + STATUS UPDATES:
//
//     - The notifier sends status updates on MQTT topic: "your_custom_mqtt_topic/status" with these values:
//
//                  "playing"       either paying an mp3, a ringtone or saying a text
//                  "free"          free and waiting for a command
//                  "error"         error when receiving a command: example: MP3 file URL can't be loaded
//                  
//     - The LWT MQTT topic: "your_custom_topic/LWT" with values:
//                   "online"       
//                   "offline"    
//                                                      
//     - At boot, the notifier plays a 2 second audio chime when it is successfully connected to Wifi & MQTT
//
//
//    + SETUP:
//     
//      To Upload to an ESP8266 module or board:
//      
//        - Set CPU Frequency to 160MHz ( Arduino IDE: Tools > CPU Frequency )
//        - Set IwIP to V2 Higher Bandwidth ( Arduino IDE: Tools > IwIP Variant )
//        - Press "Upload"
//
//
//    + DEPENDENCIES:
//
//     - ESP8266          https://github.com/esp8266/Arduino
//     - ESP8266Audio     https://github.com/earlephilhower/ESP8266Audio
//     - ESP8266SAM       https://github.com/earlephilhower/ESP8266SAM
//     - IotWebConf       https://github.com/prampec/IotWebConf
//     - PubSubClient     https://github.com/knolleary/pubsubclient
//
//
//    Many thanks to all the authors and contributors to the above libraries - you have done an amazing job!
//
//    For more info, please watch my instruction video at https://youtu.be/SPa9SMyPU58
//    MrDIY.ca
//  ============================================================================================================== */
//
//// #define DEBUG_FLAG              // 取消注释开启Debug模式，串口台输出内容
////#define USE_I2S                 // 取消注释输出I2S音频信号
// #define LED_Pin           2       // 指示灯引脚定义
//// #define Button_Pin        16       // 打开热点进入配置页面引脚定义
//
//#include "Arduino.h"
//#include "boot_sound.h"
//#include "ESP8266WiFi.h"
//#include "PubSubClient.h"
//#include "AudioFileSourceHTTPStream.h"
//#include "AudioFileSourcePROGMEM.h"
//#include "AudioFileSourceBuffer.h"
//#include "AudioGeneratorMP3.h"
//#include "AudioGeneratorWAV.h"
//#include "AudioGeneratorRTTTL.h"
//#ifdef USE_I2S
//#include "AudioOutputI2S.h"
//#else
//#include "AudioOutputI2SNoDAC.h"
//#endif
//#include "ESP8266SAM.h"
//#include "IotWebConf.h"
//#include "IotWebConfUsing.h"
//#include "SPI.h"
//
//
//AudioGeneratorMP3         *mp3 = NULL;
//AudioGeneratorWAV         *wav = NULL;
//AudioGeneratorRTTTL       *rtttl = NULL;
//AudioFileSourceHTTPStream *file_http = NULL;
//AudioFileSourcePROGMEM    *file_progmem = NULL;
//AudioFileSourceBuffer     *buff = NULL;
//#ifdef USE_I2S
//AudioOutputI2S            *out = NULL;
//#else
//AudioOutputI2SNoDAC       *out = NULL;
//#endif
//
//WiFiClient                wifiClient;
//PubSubClient              mqttClient(wifiClient);
//#define  port             1883      //MQTT端口号
//#define  MQTT_MSG_MAXSIZE    256       //MQTT接收信息最大长度
//const char* willTopic     = "init_mess";    //初识信息的主题：/mgodmonkey/init_mess
//const char* willMessage   = "offline";
//boolean willRetain        = false;
//byte willQoS              = 0;  //MQTT发送机制：0~只发送一次 1~至少发送一次 2~至少发送两次
//
//// 播放器初识配置
//float volume_level              = 0.8;  //音量：0~1.0
//String playing_status;
//const int preallocateBufferSize = 2048;
//void *preallocateBuffer = NULL;
//
//// 热点初识配置 clientID：热点名/MQTT的clientID     wifiInitalApPassword：热点起始密码
//#ifdef ESP8266
//String ChipId = String(ESP.getChipId(), HEX);
//#elif ESP32
//String ChipId = String((uint32_t) ESP.getEfuseMac(), HEX);
//#endif
//String clientID = String("MGod monkey-") + ChipId;
//#define wifiInitialApPassword "wpq5201314"
//#define CONFIG_VERSION "V1_1"
//
//
//// 从Web中获取到的MQTT服务器信息
//char mqttServer[32];
//char mqttUserName[16];
//char mqttUserPassword[16];
//char mqttTopicPrefix[35] = "/mgodmonkey";
//char mqttTopic[MQTT_MSG_MAXSIZE];
//
//// IotWebConf类的创建
//DNSServer             dnsServer;
//WebServer             server(80);
//IotWebConf            iotWebConf(clientID.c_str(), &dnsServer, &server, wifiInitialApPassword, CONFIG_VERSION);
//IotWebConfTextParameter   mqttServerParam           = IotWebConfTextParameter("MQTT server", "mqttServer", mqttServer, sizeof(mqttServer), "broker.mqtt-dashboard.com", "default: broker.mqtt-dashboard.com");
//IotWebConfTextParameter   mqttUserNameParam         = IotWebConfTextParameter("MQTT username", "mqttUser", mqttUserName, sizeof(mqttUserName), "", "default: null");
//IotWebConfPasswordParameter   mqttUserPasswordParam = IotWebConfPasswordParameter("MQTT password", "mqttPass", mqttUserPassword, sizeof(mqttUserPassword),"/0", "defualt: null");
//
//
//// 声明函数
//void mqttConnect();
//void playBootSound();
//void wifiConnected();
//void stopPlaying();
//char* mqttFullTopic(const char action[]);
//void broadcastStatus(const char topic[], String msg);
//void updateLEDBrightness(int brightness_percentage);
//void onMqttMessage(char* topic, byte* payload, unsigned int mlength);
//bool formValidator(iotwebconf::WebRequestWrapper* webRequestWrapper);
//
//
///* ################################## Setup ############################################# */
//
//void setup() {
//
//Serial.begin(115200);
//
//
//  iotWebConf.addSystemParameter(&mqttServerParam);
//  iotWebConf.addSystemParameter(&mqttUserNameParam);
//  iotWebConf.addSystemParameter(&mqttUserPasswordParam);
//  iotWebConf.setWifiConnectionCallback(&wifiConnected);
//  iotWebConf.setFormValidator(&formValidator);
//#ifdef LED_Pin
//  pinMode(LED_Pin, OUTPUT); 
//  updateLEDBrightness(10);
//  iotWebConf.setStatusPin(LED_Pin);
//#endif
//#ifdef Button_Pin
//  pinMode(Button_Pin, INPUT_PULLUP);
//  iotWebConf.setConfigPin(Button_Pin);
//#endif
//  
//  iotWebConf.skipApStartup();
//
//  boolean validConfig = iotWebConf.init();
//  if (!validConfig)
//  {
//    mqttServer[0] = '\0';
//    mqttUserName[0] = '\0';
//    mqttUserPassword[0] = '\0';
//  }
//
//  server.on("/", [] { iotWebConf.handleConfig(); });
//  server.onNotFound([] {  iotWebConf.handleNotFound();  });
//
//#ifdef USE_I2S
//  out = new AudioOutputI2S();
//  #ifdef DEBUG_FLAG
//  Serial.print("[MSG] Using I2S output!\n");
//  #endif
//#else
//  out = new AudioOutputI2SNoDAC();
//  #ifdef DEBUG_FLAG
//  Serial.print("[MSG] Using No DAC - using Serial port Rx pin!\n");
//  #endif
//#endif
//  out->SetGain(volume_level);
//}
//
///* ##################################### Loop ############################################# */
//
//void loop() {
//
//   mqttConnect();
//  mqttClient.loop();
//  if (!mp3) iotWebConf.doLoop();      // 优先处理音乐
//  if (mp3   && !mp3->loop())    stopPlaying();
//  if (wav   && !wav->loop())    stopPlaying();
//  if (rtttl && !rtttl->loop())  stopPlaying();
//
//}
//
///* ############################### 音乐播放器 ############################################ */
////播放提示音
//void playBootSound() {
//  file_progmem = new AudioFileSourcePROGMEM(boot_sound, sizeof(boot_sound));
//  wav = new AudioGeneratorWAV();
//  wav->begin(file_progmem, out);
//}
//
//void stopPlaying() {
//
//  Serial.print("[MSG] Interrupted!\n");
//  if (mp3) {
//    mp3->stop();
//    delete mp3;
//    mp3 = NULL;
//  }
//  if (wav) {
//    wav->stop();
//    delete wav;
//    wav = NULL;
//  }
//  if (rtttl) {
//    rtttl->stop();
//    delete rtttl;
//    rtttl = NULL;
//  }
//  if (buff) {
//    buff->close();
//    delete buff;
//    buff = NULL;
//  }
//  if (file_http) {
//    file_http->close();
//    delete file_http;
//    file_http = NULL;
//  }
//  if (file_progmem) {
//    file_progmem->close();
//    delete file_progmem;
//    file_progmem = NULL;
//  }
//  broadcastStatus("status", "free");
//  updateLEDBrightness(100);
//}
//
///* ################################## MQTT服务器 ############################################### */
//
///*---------------- 订阅主题回调函数 ------------------*/
//void onMqttMessage(char* topic, byte* payload, unsigned int mlength)  {
//
//  char newMsg[MQTT_MSG_MAXSIZE];
//
//  if (mlength > 0) {
//    memset(newMsg, '\0' , sizeof(newMsg));
//    memcpy(newMsg, payload, mlength);
//
//  #ifdef DEBUG_FLAG
//    Serial.print("\n");
//    Serial.print("[MQTT] topic{");
//    Serial.print(topic);
//    Serial.print("} get msg: ");
//    Serial.print(newMsg);
//    Serial.print("\n");
//  #endif
//
//    // 接收到主题：/mgodmonkey/play 的消息
//    if ( !strcmp(topic, mqttFullTopic("play") ) ) {
//      stopPlaying();
//      file_http = new AudioFileSourceHTTPStream();
//      if ( file_http->open(newMsg)) {
//        broadcastStatus("status", "playing");
//        updateLEDBrightness(50); 
//        buff = new AudioFileSourceBuffer(file_http, preallocateBuffer, preallocateBufferSize);
//        mp3 = new AudioGeneratorMP3();
//        mp3->begin(buff, out);
//      } else {
//        stopPlaying();
//        broadcastStatus("status", "error");
//        broadcastStatus("status", "free");
//      }
//    }
//
//
//    // 接收到主题：/mgodmonkey/tone 的消息
//    if ( !strcmp(topic, mqttFullTopic("tone") ) ) {
//      stopPlaying();
//      broadcastStatus("status", "playing");
//      updateLEDBrightness(50);
//      file_progmem = new AudioFileSourcePROGMEM( newMsg, sizeof(newMsg) );
//      rtttl = new AudioGeneratorRTTTL();
//      rtttl->begin(file_progmem, out);
//      broadcastStatus("status", "free");
//    }
//
//    // 接收到主题：/mgodmonkey/say 的消息
//    if ( !strcmp(topic, mqttFullTopic("say"))) {
//      stopPlaying();
//      broadcastStatus("status", "playing");
//      updateLEDBrightness(50);
//      ESP8266SAM *sam = new ESP8266SAM;
//      sam->Say(out, newMsg);
//      delete sam;
//      stopPlaying();
//      broadcastStatus("status", "free");
//    }
//
//    // 接收到主题：/mgodmonkey/volume 的消息
//    if ( !strcmp(topic, mqttFullTopic("volume"))) {
//      volume_level = atof(newMsg);
//      if ( volume_level < 0.0 ) volume_level = 0;
//      if ( volume_level > 1.0 ) volume_level = 0.7;
//      out->SetGain(volume_level);
//    }
//
//    // 接收到主题：/mgodmonkey/device 的消息
//    if ( !strcmp(topic, mqttFullTopic("device"))) {
//        broadcastStatus("deviceMsg", String("IP: ") + WiFi.localIP().toString());
//    }
//
//    // 接收到主题：/mgodmonkey/stop 的消息
//    if ( !strcmp(topic, mqttFullTopic("stop"))) {
//      stopPlaying();
//      broadcastStatus("status", "free");
//    }
//  }
//}
//
//
///*---------------- 向主题推送消息函数 ------------------*/
//void broadcastStatus(const char topic[], String msg) {
//
//  if ( playing_status != msg) {
//    char charBuf[msg.length() + 1];
//    msg.toCharArray(charBuf, msg.length() + 1);
//    mqttClient.publish(mqttFullTopic(topic), charBuf);
//    playing_status = msg;
//
//    #ifdef DEBUG_FLAG
//    Serial.print("[MQTT] Topic{");
//    Serial.print(mqttFullTopic(topic));
//    Serial.print("} send msg: ");
//    Serial.print(msg.c_str());
//    Serial.print("\n");
//    #endif
//  }
//}
//
//
///*---------------- 调节指示灯亮度 ------------------*/
//void updateLEDBrightness(int brightness_percentage) {
//#ifdef LED_Pin
//  analogWrite(LED_Pin, (int) brightness_percentage * 255 / 100);
//#endif
//}
//
///*---------------- MQTT服务器连接函数 ------------------*/
//void mqttConnect() {
//  if (!mqttClient.connected()) {
//    updateLEDBrightness(0);
//    if (mqttClient.connect(clientID.c_str(), mqttUserName, mqttUserPassword, mqttFullTopic(willTopic), willQoS, willRetain, willMessage)) {
//      mqttClient.subscribe(mqttFullTopic("play"));
//      mqttClient.subscribe(mqttFullTopic("tone"));
//      mqttClient.subscribe(mqttFullTopic("say"));
//      mqttClient.subscribe(mqttFullTopic("stop"));
//      mqttClient.subscribe(mqttFullTopic("volume"));
//      
//      #ifdef DEBUG_FLAG
//      Serial.print("[MSG] Connected to MQTT\n");
//      #endif
//
//      broadcastStatus("deviceMsg", "server_status: online");
//      broadcastStatus("deviceMsg", String("MQTTServer: ") + String(mqttServer));
//      broadcastStatus("deviceMsg", String("IP: ") + WiFi.localIP().toString());
//      broadcastStatus("status", "free");
//      updateLEDBrightness(100);
//    }
//  }
//}
//
///*---------------- WiFi连接回调函数------------------*/
//void wifiConnected() {
//  #ifdef DEBUG_FLAG
//    Serial.print("\n");
//    Serial.print("==================================================================\n");
//    Serial.print(" MGodwu WiFi Music Player V1.0\n");
//    Serial.print("==================================================================\n");
//    Serial.print("\n");
//    Serial.print("[MSG] Connected to Wifi, IP:");
//    Serial.print(WiFi.localIP().toString());
//    Serial.print("\n");
//   #endif
//
//  playBootSound();
//  mqttClient.setServer(mqttServer, port);
//  mqttClient.setCallback(onMqttMessage);
//  mqttClient.setBufferSize(MQTT_MSG_MAXSIZE);
//  mqttConnect();
//}
//
///*---------------- 表单验证回调函数 ------------------*/
//bool formValidator(iotwebconf::WebRequestWrapper* webRequestWrapper) {
//  bool valid = true;
//  int l = server.arg(mqttServerParam.getId()).length();
//  if (l == 0) {
//    mqttServerParam.errorMessage = "请输入一个正确的MQTT服务器!";
//    valid = false;
//  }
//  return valid;
//}
//
///*---------------- 给MQTT主题名添加前缀------------------*/
//char* mqttFullTopic(const char action[]) {
//  strcpy (mqttTopic, mqttTopicPrefix);
//  strcat (mqttTopic, "/");
//  strcat (mqttTopic, action);
//  return mqttTopic;
//}